# Basecamp プロジェクトのルールと注意点

## 要約機能 (Summaries)

### APIキーの管理
- Gemini API キーなどのシークレットは必ず環境変数や GitHub Secrets として管理し、コードにハードコーディングしないこと
- 開発環境での API キーは `.env.local` に保存することを推奨（`.gitignore` に追加済み）

### 要約の生成と表示
- 要約は100-200字程度を目安とし、元の記事の主要な情報を損なわないこと
- Gemini API の利用コストを考慮し、既存の要約は不必要に再生成しないこと
- プロンプトの変更は慎重に行い、一貫性のある要約結果を維持すること

### 将来の拡張性に関する注意点
- 新しい記事ソース（プラットフォーム）を追加する場合:
  1. `lib/types.ts` の `Post.platform` 型定義を更新
  2. `lib/formatters.ts` の `convertUrlToCustomSchema` 関数を更新
  3. `generate-summaries.js` の `fetchPosts` 関数に新しいAPIエンドポイントを追加

### パフォーマンス上の注意点
- `summaries.json` が大きくなりすぎる場合は、古いエントリの削除またはアーカイブを検討
- 日付で区切られたファイル（例: `summaries-2025-03.json`）に分割することも一案

### より高度なカスタマイズ
- より高品質な要約を得るため、記事の本文全体をGemini APIに渡す方法も検討可能
  - ただし、APIの文字数制限に注意し、大きな記事は適切に分割すること
  - そのためのクローラー機能を実装する場合は、Webサイトの利用規約を遵守すること

## 一般的なコーディング規約

- Reactコンポーネントは関数コンポーネントとTypeScriptを使用
- スタイリングはTailwind CSSを使用し、コンポーネント固有のカスタムCSSは最小限に
- 非同期処理はasync/awaitを優先し、可読性を重視
- エラーハンドリングは適切に行い、ユーザーにフレンドリーなメッセージを表示
- コード変更後は必ずlintとテストを実行（`npm run lint`）
